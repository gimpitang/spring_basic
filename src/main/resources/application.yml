#spring.application.name=basic

#아래 방식은 .properties 확장자에 의한 방식
#.을통해 계층구조를 표현 => 문제점 : 중복이 발생할 가능성이 많음.
#server.port=8081

#아래 방식은 .yml 또는 .yaml 확장자에 의한 방식
#들여쓰기 방식을 통해서 계층구조를 표현
#server:
#   port: 8081


#jdbc를 이용한 DB접근
#아래의 jdbc 기본 db 관련 설정은 jdbc 뿐만아니라 mybatis, jpa 등 모든 기술에 근간이 됨.
#여기서 basic은 workbench의 schema title임
spring:
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:3306/basic
    username: root
    password: 1234

  jpa:
    database: mysql
#    innoDB(transaction 사용 가능한 tool인 것이 특징) 사용하겠다.
    database-platform: org.hibernate.dialect.MariaDBDialect
#    ddl 문 자동 생성. table은 자동반영(생성) 해주지만, 스키마는 사전에 생성 필요.
    generate-ddl: true
    #jap는 인터페이스 이고, hibernate가 jpa의 실질적인 구형체(실질적인 기능 구현)
    hibernate:
      #    자동생성 옵션(ddl)
      #     create: 매번 table을 drop 후 재생성
      #     update: entity 변경사항 있을 경우에 alter문 생성 (모든 변경사항을 alter하는 것은 아님.) 기존데이터 유지. - 컬럼의 추가 정도만 반영
      #     validate: 변경사항만 check 후 콘솔창에 로그로 출력 -> 이경우에는 DBA or DA(데이터베이스 달인) -> 직접 alter문 실행
      ddl-auto: update
    # 콘솔창에 ddl, dml문을 출력하여 보여주는 옵션
    show_sql: true
#    swagger2.4 이상 버전을 사용하기 위해 url 패턴 관련한 설정 변경
#    swagger의 url : http://localhost:8080/swagger-ui/
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher


##  MapperFile(mybatis의 쿼리파일)의 위치를 명시. 기본적으로 resources 폴더 밑에 모든 파일 scan
#mybatis:
#  mapper-locations: classpath:/mapper/**/*.xml